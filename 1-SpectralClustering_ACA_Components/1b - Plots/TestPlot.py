import matplotlib.pyplot as plt
import numpy as np

# Correct sampling_percentage to be linearly increasing from 5 to 33 to represent iterations correctly
sampling_percentage = np.linspace(3, 20, 17)

# New error values for the given eigenvalues
errors_eigenvalue_1 = np.array([1.0000000e+00, 7.3590208e-04, 7.3590208e-08, 7.3590208e-08, 5.6590208e-08, 5.6590208e-08,
                      5.6590208e-08, 5.6590208e-08, 5.6590208e-08, 5.6590208e-08, 5.6590208e-08, 5.6590208e-08,
                      5.6590208e-08, 5.6590208e-08, 5.6590208e-08, 5.6590208e-08, 5.6590208e-08])
errors_eigenvalue_2 = np.array([1.0000000e+00, 1.0000000e+00, 5.49297953e-02, 5.63145330e-03, 3.51822103e-03, 1.29771623e-04, 8.94985919e-07,
                                 6.1590208e-08, 6.1590208e-08, 6.1590208e-08, 6.1590208e-08, 6.1590208e-08,
                            6.1590208e-08, 6.1590208e-08, 6.1590208e-08, 6.1590208e-08, 6.1590208e-08])
errors_eigenvalue_3 = np.array([1.0000000e+00, 1.0000000e+00, 1.05760023e-01, 8.24372417e-02, 3.84689904e-02, 5.38330969e-04, 4.76691690e-06,
                            6.4034936e-08, 6.4034936e-08, 6.4034936e-08, 6.4034936e-08, 6.4034936e-08,
                            6.4034936e-08, 6.4034936e-08, 6.4034936e-08, 6.4034936e-08, 6.4034936e-08])

# errors_eigenvalue_4 = np.array([1.53086773e-02, 4.39338358e-03, 4.43598748e-03, 1.21055662e-03,
#                                 2.20844897e-03, 6.37328194e-04, 1.03491921e-03, 1.73690775e-03,
#                                 1.69145076e-03, 4.42476997e-04, 2.29218763e-04, 1.73286890e-03,
#                                 6.04689857e-04, 6.74356760e-04, 4.01630849e-04, 1.50749932e-04,
#                                 5.01074863e-04, 4.50578025e-04, 4.63079816e-04, 2.56102619e-04,
#                                 3.57919345e-04, 3.26209638e-05, 2.59314831e-04, 7.99208428e-05,
#                                 1.11368708e-03])

# relative_errors_eigenvalue_0 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# relative_errors_eigenvalue_1 = [5.49297953e-02, 5.63145330e-03, 3.51822103e-03, 1.29771623e-04, 8.94985919e-07, 
#                                 6.57317890e-09, 5.58726673e-10, 5.89036898e-10, 5.89090567e-10, 5.89092244e-10, 5.89093792e-10, 5.89093792e-10, 5.89092373e-10, 5.89093147e-10, 5.89092631e-10, 5.89093147e-10, 5.89094179e-10, 5.89094437e-10, 5.89094953e-10, 5.89093276e-10, 5.89094437e-10, 5.89091728e-10, 5.89095598e-10, 5.89093405e-10, 5.89092115e-10, 5.89092244e-10, 5.89090954e-10, 5.89092373e-10]

# relative_errors_eigenvalue_2 = [1.05760023e-01, 8.24372417e-02, 3.84689904e-02, 5.38330969e-04, 4.76691690e-06, 5.02209306e-08, 1.86087223e-10, 9.34821001e-11, 9.41636451e-11, 9.41642776e-11, 9.41664280e-11, 9.41666810e-11, 9.41652895e-11, 9.41660485e-11, 9.41659220e-11, 9.41635186e-11, 9.41681989e-11, 9.41654160e-11, 9.41654160e-11, 9.41640246e-11, 9.41657955e-11, 9.41655425e-11, 9.41665545e-11, 9.41668075e-11, 9.41655425e-11, 9.41644041e-11, 9.41657955e-11, 9.41649101e-11]





plt.figure(figsize=(10, 6))

# Plotting the data
plt.plot(sampling_percentage, errors_eigenvalue_1, 'b-.', label='$\phi_1$')
plt.plot(sampling_percentage, errors_eigenvalue_2, 'r-.', label='$\phi_2$')
plt.plot(sampling_percentage, errors_eigenvalue_3, 'g-.', label='$\phi_3$')
# plt.plot(sampling_percentage, errors_eigenvalue_4, 'm-.', label='$\phi_4$')

# Adding labels and title
plt.xlabel('Lanczos iteraties (m)')
plt.ylabel('Relatieve Fout (Frobenius Norm)')
plt.yscale('log')
plt.legend()

# Display the plot
plt.grid(True)
plt.show()
